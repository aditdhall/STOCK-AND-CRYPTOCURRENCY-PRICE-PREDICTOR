# -*- coding: utf-8 -*-
"""BITCU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vr9vouBu1bm1BpCePtuqASVh_83Uicdl
"""

import pandas as pd
import datetime
import requests
import numpy as np
import csv
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from sklearn.model_selection import cross_validate
from sklearn.ensemble import RandomForestRegressor
import pickle

timeWindow = 2000
coinTo = "BTC"
ccFrom = "USD"
exchange = "Kraken"
a=[]

def getHistPriceData(coinTo, ccFrom, limit, exchange):
    curl = 'https://min-api.cryptocompare.com/data/histoday?fsym={}&tsym={}&limit={}&e={}'\
            .format(coinTo.upper(), ccFrom.upper(), limit, exchange)
    data = requests.get(curl, headers={'User-Agent': 'Mozilla/5.0'}).json()['Data']
    df = pd.DataFrame(data)
    df['date'] = [datetime.datetime.fromtimestamp(d).strftime('%Y-%m-%d') for d in df.time]
    return df
df=getHistPriceData(coinTo, ccFrom,timeWindow, exchange)
print(df)
df.to_csv('BITCU.csv')

df.dropna()
df.drop_duplicates(keep=False,inplace=True)
df.head()

df1= df
df= df1.drop(['conversionType', 'conversionSymbol'],axis=1)

df.shape

df['date'] = pd.to_datetime(df['date'])

data = df.set_index("date")

df.corr()
#pair wise correlation

data['avg']=data[['open','close']].mean(axis=1)

data.head()

x=data['open']
plt.figure(figsize=(15,8))
plt.plot(x,color='g')
plt.title("OPEN values")
plt.xlabel("DATE/YEAR")
plt.ylabel("USD VALUE")
plt.show

y = data['close']
plt.figure(figsize=(15,8))
plt.plot(y,color='r')
plt.title("CLOSE values")
plt.xlabel("DATE/YEAR")
plt.ylabel("USD VALUE")
plt.show

plt.figure(figsize=(15,8))
plt.plot(data.index,data.avg)
plt.title("AVG VALUES")
plt.xlabel("DATE/YEAR")
plt.ylabel("USD VALUE")

x.head(-5)

y.head(-5)

Y = data['close']
X = data.drop(columns=['close','avg'])

#train test split
xtrain = X['2015-05':'2019-10']
ytrain = Y['2015-05':'2019-10']
xtest = X['2019-11':'2020']
ytest = Y['2019-11':'2020']

"""## b) Random Forest Algorithm"""

reg=RandomForestRegressor(n_estimators=400,random_state=42)
reg.fit(xtrain,ytrain)
accuracy=reg.score(xtest,ytest)
accuracy=accuracy*100
accuracy = float("{0:.4f}".format(accuracy))
print('Accuracy is:',accuracy,'%')

plt.figure(figsize=(15,8))
plt.title("THE GRAPH OBTAINED USING ML ALGO")
plt.plot(ytrain)
plt.plot(ytest)
plt.xlabel("DATE/YEAR")
plt.ylabel("USD VALUE")

